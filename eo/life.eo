+alias org.eolang.txt.sscanf
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout

[x y] > pair

[id arg] > parseSleep
  if. > @
    lt.
      id
      arg.length
    seq
      (sscanf "%s" (arg.at id)).at 0 > val
      if.
        eq.
          val
          "sleep"
        (sscanf "%d" (arg.at (id.plus 1))).at 0
        ^.parseSleep
          id.plus 1
          arg
    1000

[str] > find
  [id] > rec
    if. > @
      lt.
        id
        str.length
      if.
        eq.
          str.slice id 1
          "x"
        id
        ^.rec
          id.plus 1
      -1
  rec 0 > @

[str] > getSize
  seq > @
    find str > pos
    str.length > len
    (sscanf "%d" (str.slice 0 pos)).at 0 > n
    (sscanf "%d" (str.slice (pos.plus 1) ((len.minus pos).minus 1))).at 0 > m
    pair n m

[id arg] > parseSize
  if. > @
    lt.
      id
      arg.length
    seq
      (sscanf "%s" (arg.at id)).at 0 > val
      if.
        eq.
          val
          "size"
        getSize ((sscanf "%s" (arg.at (id.plus 1))).at 0)
        ^.parseSize
          id.plus 1
          arg
    pair 40 40

[arg] > parsePut
  [id arr] > rec
    if. > @
      lt.
        id
        ^.arg.length
      seq
        (sscanf "%s" (arg.at id)).at 0 > val
        if.
          eq.
            val
            "put"
          ^.rec
            id.plus 2
            with.
              arr
              getSize ((sscanf "%s" (arg.at (id.plus 1))).at 0)
          ^.rec
            id.plus 1
            arr
      arr
  rec 0 * > @

[args...] > life
  parseSleep 0 args > sleep
  parseSize 0 args > size
  parsePut args > put


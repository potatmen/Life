+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+alias org.eolang.txt.sscanf
[x y] > pair

[id arg] > parseSleep
  if. > @
    lt.
      id
      arg.length
    seq
      (sscanf "%s" (arg.at id)).at 0 > val
      if.
        eq.
          val
          "sleep"
        (sscanf "%d" (arg.at (id.plus 1))).at 0
        ^.parseSleep
          id.plus 1
          arg
    1000

[str] > find
  [id] > rec
    if. > @
      lt.
        id
        str.length
      if.
        eq.
          str.slice id 1
          "x"
        id
        ^.rec
          id.plus 1
      -1
  rec 0 > @

[str] > getSize
  find str > pos
  str.length > len
  (sscanf "%d" (str.slice 0 pos)).at 0 > n
  (sscanf "%d" (str.slice (pos.plus 1) ((len.minus pos).minus 1))).at 0 > m
  pair n m > @

[id arg] > parseSize
  if. > @
    lt.
      id
      arg.length
    seq
      (sscanf "%s" (arg.at id)).at 0 > val
      if.
        eq.
          val
          "size"
        getSize ((sscanf "%s" (arg.at (id.plus 1))).at 0)
        ^.parseSize
          id.plus 1
          arg
    pair 40 40

[arg] > parsePut
  [id arr] > rec
    if. > @
      lt.
        id
        ^.arg.length
      seq
        (sscanf "%s" (arg.at id)).at 0 > val
        if.
          eq.
            val
            "put"
          ^.rec
            id.plus 2
            with.
              arr
              getSize ((sscanf "%s" (arg.at (id.plus 1))).at 0)
          ^.rec
            id.plus 1
            arr
      arr
  rec 0 * > @

[state] > cell

[newState] > changeState
  cell newState > @

[cnt c] > cellLive
  if. > @
    or.
      and.
        c.state
        or.
          cnt.eq 2
          cnt.eq 3
      and.
        not.
          c.state
        cnt.eq 3
    cell TRUE
    cell FALSE

[sz] > makeGrid
  [id res] > build
    if. > @
      lt.
        id
        ^.sz
      ^.build
        id.plus 1
        with.
          res
          cell FALSE
      res
  build 0 * > @

[pos c grid] > change
  grid.length > sz
  [id res] > rec
    if. > @
      lt.
        id
        ^.sz
      if.
        eq.
          id
          ^.pos
        ^.rec
          id.plus 1
          with.
            res
            ^.c
        ^.rec
          id.plus 1
          with.
            res
            (^.grid).at id
      res
  rec 0 * > @

[id arr grid m] > fill
  if. > @
    lt.
      id
      arr.length
    ^.fill
      id.plus 1
      arr
      seq
        (arr.at id).x > a
        (arr.at id).y > b
        (a.times m).plus b > pos
        change > res!
          pos
          cell TRUE
          grid
        res
      m
    grid

[args...] > life
  parseSleep 0 args > sleep
  parseSize 0 args > size
  parsePut args > put!
  size.x > n
  size.y > m
  makeGrid (n.times m) > clear!
  fill > res!
    0
    put
    clear
    m
  stdout > @
    sprintf
      "%d %b %b %b\n"
      res.length
      (res.at 17).state
      (res.at 22).state
      (res.at 1).state
